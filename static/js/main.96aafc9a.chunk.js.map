{"version":3,"sources":["components/Shared/Navbar.jsx","components/ListItems/Table.jsx","containers/Directory.jsx","containers/Details.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","src","alt","style","width","Table","props","scope","type","employeesToDisplay","map","employee","index","key","picture","thumbnail","name","first","last","email","cell","to","pathname","state","id","login","uuid","role","Directory","employees","searchTerm","getEmployees","axios","get","then","response","setState","data","results","catch","err","console","log","handleSubmit","event","preventDefault","filteredEmployees","filter","regex","RegExp","match","handleChange","e","target","value","this","backgroundColor","color","textAlign","margin","marginLeft","onSubmit","marginRight","placeholder","aria-label","onChange","Component","Details","useState","location","medium","street","number","city","postcode","country","phone","App","exact","path","component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.96aafc9a.chunk.js","sourcesContent":["import React from 'react';\nimport '../logo.svg';\n\nconst Navbar = () => {\n    return (\n        <nav className=\"navbar navbar-dark bg-dark\">\n            <a className=\"navbar-brand\" href=\"/\"><img src=\"logo.svg\" alt=\"logo\" style={{width: 75}}/></a>\n            <a className=\"navbar-brand\" href=\"/\">Directory</a>\n            <a className=\"navbar-brand\" href=\"/details\">Details</a>\n        </nav>\n    );\n};\n\nexport default Navbar;","import React from 'react';\nimport { Link } from 'react-router-dom';\n// import { browserHistory } from \"react-router\";\n// import { useHistory } from \"react-router-dom\";\n\nconst Table = (props) => {\n\n  // function getSortedData(data, prop, isAsc) {\n  //   return data.sort((a, b) => {\n  //       return (a[prop] < b[prop] ? -1 : 1) * (isAsc ? 1 : -1)\n  //   });\n  // }\n  \n  return (\n    <div className=\"container\">\n\n      <div className=\"row justify-content-center\">\n        <table className=\"table table-striped\">\n          <thead>\n            <tr>\n              <th scope=\"col\">Picture</th>\n              <th scope=\"col\"><button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"button\">First Name</button></th>\n              <th scope=\"col\"><button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"button\">Last Name</button></th>\n              <th scope=\"col\">Email</th>\n              <th scope=\"col\">Cell</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.employeesToDisplay.map((employee, index) => {\n              return (\n                <tr key={index}>\n                  <td><img src={employee.picture.thumbnail} alt=\"employee avatar\" /></td>\n                  <td>{employee.name.first}</td>\n                  <td>{employee.name.last}</td>\n                  <td>{employee.email}</td>\n                  <td>{employee.cell}</td>\n                  <td>\n                    <Link to={{\n                      pathname: \"/details\",\n                      state: {\n                        employee: employee \n                      }\n                    }} id={employee.login.uuid} className=\"btn btn-outline-success my-2 my-sm-0\" role=\"button\">Details\n                    </Link>\n                  </td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </div>\n\n    </div>\n  )\n}\n\nexport default Table;","import React, { Component } from 'react';\n// import List from \"../components/ListItems/List\";\nimport Table from \"../components/ListItems/Table\";\nimport axios from 'axios';\n\n\nexport default class Directory extends Component {\n\n  state = {\n    employees: [],\n    employeesToDisplay: [],\n    searchTerm: \"\",\n  };\n\n  componentDidMount() {\n    this.getEmployees();\n  }\n\n  getEmployees = () => {\n    axios\n      .get(\"https://randomuser.me/api/?results=10\")\n      .then((response) => {\n        // console.log(response.data.results);\n        this.setState({\n          employees: response.data.results,\n          employeesToDisplay: response.data.results\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  // HANDLESUBMIT FUNCTION - SEARCH FOR EMAIL\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const employees = [...this.state.employees];\n    const filteredEmployees = employees.filter(employee => {\n        // return employee.name.last.includes(this.state.searchTerm);\n        const regex = new RegExp(this.state.searchTerm, 'gi');\n        return employee.name.last.match(regex);\n    });\n    this.setState({\n      employeesToDisplay: filteredEmployees\n    })\n  }\n\n  // HANDLECHANGE FUNCTION\n\n  handleChange = (e) => {\n    const {name, value} = e.target;\n    this.setState({\n      [name]: value\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"row justify-content-center\" style={{ backgroundColor: 'darkslategrey', color: 'white', textAlign: 'center', margin: 20 }}>\n          <h1 style={{marginLeft: 30}}>Employee Directory</h1>\n          <hr />\n          {/* SEARCH FORM */}\n          <form className=\"form-inline\" onSubmit={this.handleSubmit} style={{marginRight: 30}}>\n                <input \n                  className=\"form-control mr-sm-2\" \n                  type=\"text\" \n                  placeholder=\"Search By Last Name\" \n                  aria-label=\"Search\"\n                  name=\"searchTerm\"\n                  value={this.state.searchTerm}\n                  onChange={this.handleChange}\n                />\n                <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n          </form>\n        </div>\n        {/* <List employees={this.state.employees} /> */}\n        <Table \n          employees={this.state.employees} \n          employeesToDisplay={this.state.employeesToDisplay}\n          searchTerm={this.state.searchTerm}\n        />\n      </div>\n    )\n  }\n}\n","import React, { useState } from 'react'\n\nconst Details = (props) => {\n    const [employee] = useState(props.location.state.employee);\n\n    return (\n        <div>\n            <div className=\"row justify-content-center\" style={{ backgroundColor: 'darkslategrey', color: 'white', textAlign: 'center', margin: 20 }}>\n                <h1 style={{ marginLeft: 30 }}>User Details</h1>\n            </div>\n\n            <div className=\"row justify-content-center\">\n                <div className=\"card\">\n                    <img src={employee.picture.medium} className=\"card-img-top\" style={{ width: 300 }} alt=\"employee avatar\" />\n\n                    <div className=\"card-body\">\n                        <h2 className=\"card-title\">{employee.name.first} {employee.name.last}</h2>\n                        <p className=\"card-text\"><strong>Address:</strong> <br></br>\n                        {employee.location.street.number} {employee.location.street.name} <br></br>\n                            {employee.location.city} {employee.location.state} {employee.location.postcode} <br></br>\n                            {employee.location.country}\n                        </p>\n                        <p className=\"card-text\">\n                        <strong>Email:</strong> {employee.email}\n                        </p>\n                        <p className=\"card-text\">\n                        <strong>Cell Phone:</strong> {employee.cell}\n                        </p>\n                        <p className=\"card-text\">\n                        <strong>Home Phone:</strong> {employee.phone}\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Details;","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport Navbar from './components/Shared/Navbar';\nimport Directory from './containers/Directory';\nimport Details from './containers/Details';\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <Route exact path=\"/\" component={Directory} />\n      <Route exact path=\"/directory\" component={Directory} />\n      <Route exact path=\"/details\" component={Details} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}